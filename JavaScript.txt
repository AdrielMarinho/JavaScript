JavaScript
    O que faz o JavaScript?
        Cliente x Servidor
        Ex:
            Caso você esteja vendo um vídeo, o aparelho que você está
            utilizando são clientes como:
            Computadores e celulares.
              Você está utilizando um serviço fornecido por um
              servidor.
            Ou seja nesse exato momento (vídeo), você está pegando
            dados dos servidores do YouTube.
              E esses servidores são máquinas de alta performance que
              estão fornecendo os dados que são os vídeos.
            Independente do que você use, no momento em que você usa
            um dispositivo, ele é um cliente que precisa de dados de
            um servidor (as vezes até mais que 1 servidor).

            Esse acesso é feito através de um navegador.
              E o site que você entrar (URL), vai para a infraestrutura
              da internet e ela te responde exatamente para qual
              servidor você vai ser desviado.
                 E de qualquer maneira a infraestrutura da internet vai
                 chegar a um determinado servidor.

            Servidor
             São máquinas parecidas com a do cliente porém com pastas
             e arquivos no qual o usuário está interessado, algo que
             será acessado.
             Esse acesso é feito é feito da seguinte forma:
                 Uma cópia do arquivo é feita e é enviada diretamente
                 para o cliente no seu navegador e apartir daí o
                 navegador vai começar a gerar o efeito visual do site.

    JavaScript foi criado pela NetScape.

    O JavaScript surgiu como uma tecnologia para clientes só que hoje
    ele funciona até para servidores.

    E o JavaScript funciona com mais 2 tecnologias sendo 3 no total
    são elas: HTML, CSS e JS.

    HTML -> Conteúdo, Linguagem de marcação.
    CSS -> Design, Estilos.
    JS -> Programação, interação.

    São elas 3 que compõem a parte de cliente da grande maioria dos sites hoje em dia.

    JavaScript evolução
        JavaScript não tem nada a ver com Java, foi tudo uma jogada de marketing da época,
        pois a linguagem Java estava muito conhecida, e para pegar a influência eles nomearam
        como JavaScript (Os nomes iniciais eram Mocca e depois seria LiveScript).

        JavaScript foi para dado para ECMA para ter uma padronização, e com isso foi criado o
        EcmaScript que é o JavaScript padronizado.

        (Node.js que popularizou o JS do lado do servidor.
        (V8 é o motor que roda por trás do chrome, ele é código aberto e com isso foi feita uma
        modificação para que ele rodasse fora do chrome, assim surgindo o Node.js)).

        ECMAScript
        foi lançada em 1997 (Versão 1.0), foi atualizada em 1998 (Versão 2.0), em 1999 foi atualizada
        novamente (Versão 3.0), as promessas para próxima versão eram tão grandes que
        não lançava nunca e somente em 2009 foi lançado a ES5, (foi pulada a versão 4.0), em 2015 lançou
        a versão ES6, e apartir daí começou a ser lançada 1 por ano, com o nome do ano, ES 2016, ES 2017,
        ES 2018.

        Várias ferramentas surgiram com a evolução do JS.
            Angular, Node.js, React, JQuery, Vue, Electron,
            Ionic, Cordova e etc.


    Tipos de dados JS (Data Types)
      3 tipos "principais / primitivos"
        Number, String, Boolean

          Number : Int, Float, a variações como Infinity e NaN (Not a Number).
          String : Letras.
          Boolean : Verdadeiro ou Falso (True or False).

      Temos também os tipos Objects(Arrays (Vetores)), Undefined, Null (O tipo dele é de um Object) e Function.

    As variáveis não tem um valor fixado, pois quando são criadas utilizamos "var" ou "let" para criar uma variável.
      Ex:
        var n1 = 8
        Se eu printar vai aparecer que n1 é 8, porém se eu fizer
        n1 = "teste"
        A princípio daria erro, mas como as variáveis não são int n1 ou String n1 não dá erro, por elas serem var n1, ela se torna flexível e recebe qualquer valor que colocarmos.
        E com isso se printarmos novamente vai aparecer "teste".

Comandos
  window.prompt (abre uma tela no qual o usuário digita algo)
  window.alert (abre uma caixa com "alerta" ou "texto")
  window.confirm (abre uma caixa com uma mensagem e dois botões, confirmar e cancelar)
  Number.parseInt() (transforma um valor em inteiro)
  Number.parseFloat() (transforma um valor em real)
  Number() (o JS analisa e decide qual é o valor que será transformado)
  String() (o JS transforma em string)
  n.toString () (o JS transforma a variável "n" em String)
  s.length (me diz o tamanho da string)
  s.toUpperCase() (coloca a string toda em maiúsculo)
  s.toLowerCase() (coloca a string toda em minúsculo)
  n1.toFixed() (coloca a quantidade de casas decimais que você quer no número)
  n1.replace("", "") (troca uma coisa por outra)
  n1.toLocaleString('pt-BR', {style: 'currency', currency: 'BRL'}) (amostra o R$)
  document.write() (escreve na tela)
  p1.innerText (pega o texto p1)
  p1.innerHTML (pega toda a tag HTML de p1 (Formatação))
  console.log('') (É o print do Node.js)
  var hora = new Date() (comando para pegar a data e hora do sistema)
  var hora1 = hora.getHours (pega exatamente as horas do sistema)

  Operador aritmético
  ** = simboliza a potência em JS

  O JS testa o valor da variável e não o o tipo
   5 == 5 (true)
   5 == '5' (true)
  Mas temos também o Operador de identidade ou igualdade restrita, mesma coisa com o desigual restrito 
   5 === '5' (false) (testa se eles são do mesmo valor e do mesmo tipo)
   === (idêntico)
   !== (desigual em tipos)
   5 === 5 (true)

  Operadores Lógicos
    Primeiro o ! depois o && e depois o ||, essa é a ordem se eles estiverem juntos.

  Operador Ternário
    Testa uma expressão, ele junta 3 operandos -> ?, :
    teste ? true : false
    (o que vai acontecer quando ele for verdadeiro ou falso -> teste ? true : false)
    média >= 7 ? "Aprovado" : "Reprovado"

Formatação de Strings
  var s = 'JavaScript'
  'Eu estou aprendendo s'    Não faz interpolação
  'Eu estou aprendendo' + s  Faz concatenação
  `Eu estou aprendendo ${s}` Usa template String


DOM (Document Object Model)
  Conjunto de objetos dentro do navegador que dá acesso aos componentes internos do seu website.
  Não funciona dentro do NodeJS
  Ele está presente quando está rodando o JS dentro do navegador.

Árvore DOM
  Começa na raiz, chamada de window
    Dentro do window temos vários outros objetos, 3 exemplos
      location, document e history.

      location : qual a localização do seu site, URL, qual a página atual, qual foi a página anterior.
      document : documento atual.
      history : guarda de onde você veio e para onde você vai, facilita a navegação do site.

    Dentro do document temos um documento muito importante o HTML
      É exatamente a parte HTML do site

      Dentro de HTML temos head e body (HTML é o PARENT de head e body)
        Dentro de head temos várias tags como meta, title (que são as CHILD de head)
        Dentro de body temos h1, p, p, div (no site que está sendo criado com base na aula 09 do Gustavo Guanabara)
        Dentro do segundo p temos strong

Existem várias maneiras de acessar os metodos DOM
  Umas delas são
    por Marca
      getElementsByTagName()[Posição do elemento em ordem] (consegue selecionar mais de 1 objeto pois existem objetos de vários tipos da mesma tag)

    por ID
      getElementById() (seleciona por id)

    por Nome
      getElementsByName()[] (seleciona por nome, e caso tenha mais de 1 objeto com mesmo nome colocar dentro dos colchetes a posição desse objeto)

    por Classe
      getElementsByClassName()[] (seleciona por classe, e tem que colocar a posição)

    por Seletor
      querySelector()
      querySelectorAll() (essa é a forma de selecionar no plural)

      div é representada por uma #
      class é representada por um .

Eventos DOM
  Eventos com mouse
    mouseenter (Quando o mouse passa pelo objeto, "entra" no objeto)
    mousemove (Quando move o mouse pelo objeto)
    mousedown (Quando clica no objeto)
    mouseup (Quando solta o botão do mouse)
    click (Apertar e soltar rapidamente)
    mouseout (Quando vc sai do objeto)

Funções JS
  São conjunto de códigos que só serão executadas quando um evento ocorrer.
    Bloco = grande quantidade de linhas de código.
      É delimitado no JS pelo sinal de chaves = 
      function ação(param){

      }
      (param são opcionais)

      Só são executados quando um evento ocorrer, exemplo
        Quando clicar dentro da Div a cor muda.

Condições JS
  Tipos de Condições
    Condição Simples
      Só tem 1 bloco, com a condição sempre sendo verdadeira para poder ser executada.
      Ex:
        if (condição) {
          bloco1
        }

    Condição Composta
      Tem 2 blocos, quando uma condição não é verdadeira ele executa a a outra
      Ex:
        if (condição) {
          bloco1
        } else {
          bloco2
        }
  
    Condição Aninhada
      É uma condição composta, com outras condições dentro dela
      Ex:
        if (condição 1) {
          bloco1
        } else {
          if (condição 2) {
            bloco2
          } else {
            bloco3
          }
        }

    Condição Múltipla (Switch (expressão) {} )
    É uma condição que serve para valores fixos.
    Tem uma expressão, são testados vários valores e depois volta para o fluxo normal do programa.
    Não é aplicavel para todos os tipos de situações.
    Só funciona com números inteiros ou strings.
      Ex:
        Switch (expressão) {
          case valor1:
            Bloco1
            break; (O break (todos eles menos o último, mas é bom colocar também) são obrigatórios)
          case valor2:
            Bloco2
            break;
          case valor3:
            Bloco3
            break;
          default:
            Bloco4
            break;
        }


















